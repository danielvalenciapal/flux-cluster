affinity: {}
checkDeprecation: true
clusterDomain: cluster.local
containerSecurityContext: {}
deployment:
  annotations: {}
  env: []
  labels: {}
  terminationGracePeriodSeconds: 60
dnsConfig: {}
extraContainerVolumeMounts: []
extraContainers: []
extraDeploy: []
extraInitVolumeMounts: []
extraVolumeMounts: []
extraVolumes: []
gitea:
  additionalConfigFromEnvs: []
  additionalConfigSources: []
  admin:
    email: gitea@local.domain
    existingSecret: null
    password: r8sA8CPHD9!bt6d
    passwordMode: keepUpdated
    username: gitea_admin
  config:
    server:
      SSH_LISTEN_PORT: 2222
      SSH_PORT: 22
  ldap: []
  livenessProbe:
    enabled: true
    failureThreshold: 10
    initialDelaySeconds: 200
    periodSeconds: 10
    successThreshold: 1
    tcpSocket:
      port: http
    timeoutSeconds: 1
  metrics:
    enabled: false
    serviceMonitor:
      enabled: false
      interval: ""
      relabelings: []
      scheme: ""
      scrapeTimeout: ""
      tlsConfig: {}
    token: null
  oauth: []
  podAnnotations: {}
  readinessProbe:
    enabled: true
    failureThreshold: 3
    initialDelaySeconds: 5
    periodSeconds: 10
    successThreshold: 1
    tcpSocket:
      port: http
    timeoutSeconds: 1
  ssh:
    logLevel: INFO
  startupProbe:
    enabled: false
    failureThreshold: 10
    initialDelaySeconds: 60
    periodSeconds: 10
    successThreshold: 1
    tcpSocket:
      port: http
    timeoutSeconds: 1
global:
  hostAliases: []
  imagePullSecrets: []
  imageRegistry: ""
  storageClass: ""
image:
  digest: ""
  fullOverride: ""
  pullPolicy: IfNotPresent
  registry: docker.io
  repository: gitea/gitea
  rootless: true
  tag: 1.21.11
imagePullSecrets: []
ingress:
  annotations: {}
  className: ""
  enabled: false
  hosts:
  - host: git.example.com
    paths:
    - path: /
  pathType: Prefix
  tls: []
initContainers:
  resources:
    limits: {}
    requests:
      cpu: 100m
      memory: 128Mi
initContainersScriptsVolumeMountPath: /usr/sbinx
initPreScript: ""
namespace: ""
nodeSelector: {}
persistence:
  accessModes:
  - ReadWriteOnce
  annotations:
    helm.sh/resource-policy: keep
  claimName: gitea-shared-storage
  create: true
  enabled: true
  labels: {}
  mount: true
  reclaimPolicy: Retain
  size: 10Gi
  storageClass: null
  subPath: null
  volumeName: ""
podDisruptionBudget: {}
podSecurityContext:
  fsGroup: 1000
postgresql:
  architecture: standalone
  audit:
    clientMinMessages: error
    logConnections: false
    logDisconnections: false
    logHostname: false
    logLinePrefix: ""
    logTimezone: ""
    pgAuditLog: ""
    pgAuditLogCatalog: "off"
  auth:
    database: ""
    enablePostgresUser: true
    existingSecret: ""
    password: ""
    postgresPassword: ""
    replicationPassword: ""
    replicationUsername: repl_user
    secretKeys:
      adminPasswordKey: postgres-password
      replicationPasswordKey: replication-password
      userPasswordKey: password
    usePasswordFiles: true
    username: ""
  backup:
    cronjob:
      annotations: {}
      command:
      - /bin/bash
      - -c
      - PGPASSWORD="${PGPASSWORD:-$(< "$PGPASSWORD_FILE")}" pg_dumpall --clean --if-exists
        --load-via-partition-root --quote-all-identifiers --no-password --file="${PGDUMP_DIR}/pg_dumpall-$(date
        '+%Y-%m-%d-%H-%M').pgdump"
      concurrencyPolicy: Allow
      containerSecurityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        enabled: true
        privileged: false
        readOnlyRootFilesystem: true
        runAsGroup: 1001
        runAsNonRoot: true
        runAsUser: 1001
        seLinuxOptions: {}
        seccompProfile:
          type: RuntimeDefault
      extraVolumeMounts: []
      extraVolumes: []
      failedJobsHistoryLimit: 1
      labels: {}
      networkPolicy:
        enabled: true
      nodeSelector: {}
      podSecurityContext:
        enabled: true
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      resources: {}
      resourcesPreset: nano
      restartPolicy: OnFailure
      schedule: '@daily'
      startingDeadlineSeconds: ""
      storage:
        accessModes:
        - ReadWriteOnce
        annotations: {}
        enabled: true
        existingClaim: ""
        mountPath: /backup/pgdump
        resourcePolicy: ""
        size: 8Gi
        storageClass: ""
        subPath: ""
        volumeClaimTemplates:
          selector: {}
      successfulJobsHistoryLimit: 3
      timeZone: ""
      tolerations: []
      ttlSecondsAfterFinished: ""
    enabled: false
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      compatibility:
        openshift:
          adaptSecurityContext: auto
      defaultStorageClass: ""
      hostAliases: []
      imagePullSecrets: []
      imageRegistry: ""
      postgresql:
        auth:
          database: gitea
          existingSecret: ""
          password: gitea
          postgresPassword: ""
          secretKeys:
            adminPasswordKey: ""
            replicationPasswordKey: ""
            userPasswordKey: ""
          username: gitea
        fullnameOverride: ""
        service:
          ports:
            postgresql: 5432
      security:
        allowInsecureImages: false
      storageClass: ""
  commonAnnotations: {}
  commonLabels: {}
  containerPorts:
    postgresql: 5432
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  extraDeploy: []
  fullnameOverride: ""
  global:
    compatibility:
      openshift:
        adaptSecurityContext: auto
    defaultStorageClass: ""
    hostAliases: []
    imagePullSecrets: []
    imageRegistry: ""
    postgresql:
      auth:
        database: gitea
        existingSecret: ""
        password: gitea
        postgresPassword: ""
        secretKeys:
          adminPasswordKey: ""
          replicationPasswordKey: ""
          userPasswordKey: ""
        username: gitea
      fullnameOverride: ""
      service:
        ports:
          postgresql: 5432
    security:
      allowInsecureImages: false
    storageClass: ""
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/postgresql
    tag: 17.5.0-debian-12-r12
  kubeVersion: ""
  ldap:
    basedn: ""
    binddn: ""
    bindpw: ""
    enabled: false
    port: ""
    prefix: ""
    scheme: ""
    searchAttribute: ""
    searchFilter: ""
    server: ""
    suffix: ""
    tls:
      enabled: false
    uri: ""
  metrics:
    collectors: {}
    containerPorts:
      metrics: 9187
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customMetrics: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/postgres-exporter
      tag: 0.17.1-debian-12-r11
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    prometheusRule:
      enabled: false
      labels: {}
      namespace: ""
      rules: []
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources: {}
    resourcesPreset: nano
    service:
      annotations:
        prometheus.io/port: '{{ .Values.metrics.service.ports.metrics }}'
        prometheus.io/scrape: "true"
      clusterIP: ""
      ports:
        metrics: 9187
      sessionAffinity: None
    serviceMonitor:
      enabled: false
      honorLabels: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
  nameOverride: ""
  namespaceOverride: ""
  passwordUpdateJob:
    annotations: {}
    args: []
    automountServiceAccountToken: false
    backoffLimit: 10
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    enabled: false
    extraCommands: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    initContainers: []
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    previousPasswords:
      existingSecret: ""
      password: ""
      postgresPassword: ""
      replicationPassword: ""
    resources: {}
    resourcesPreset: micro
  persistence:
    enabled: true
    reclaimPolicy: Retain
  postgresqlDataDir: /bitnami/postgresql/data
  postgresqlSharedPreloadLibraries: pgaudit
  primary:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    command: []
    configuration: ""
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    existingConfigmap: ""
    existingExtendedConfigmap: ""
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    initdb:
      args: ""
      password: ""
      postgresqlWalDir: ""
      scripts: {}
      scriptsConfigMap: ""
      scriptsSecret: ""
      user: ""
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: primary
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: true
      maxUnavailable: ""
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 10Gi
      storageClass: ""
      subPath: ""
      volumeName: data
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: Retain
      whenScaled: Retain
    pgHbaConfiguration: ""
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    preInitDb:
      scripts: {}
      scriptsConfigMap: ""
      scriptsSecret: ""
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    resources: {}
    resourcesPreset: nano
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      labels: {}
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    standby:
      enabled: false
      primaryHost: ""
      primaryPort: ""
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  psp:
    create: false
  rbac:
    create: false
    rules: []
  readReplicas:
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    command: []
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    extendedConfiguration: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraPodSpec: {}
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostIPC: false
    hostNetwork: false
    initContainers: []
    labels: {}
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    name: read
    networkPolicy:
      allowExternal: true
      allowExternalEgress: true
      enabled: true
      extraEgress: []
      extraIngress: []
      ingressNSMatchLabels: {}
      ingressNSPodMatchLabels: {}
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    pdb:
      create: true
      maxUnavailable: ""
      minAvailable: ""
    persistence:
      accessModes:
      - ReadWriteOnce
      annotations: {}
      dataSource: {}
      enabled: true
      existingClaim: ""
      labels: {}
      mountPath: /bitnami/postgresql
      selector: {}
      size: 8Gi
      storageClass: ""
      subPath: ""
    persistentVolumeClaimRetentionPolicy:
      enabled: false
      whenDeleted: Retain
      whenScaled: Retain
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podSecurityContext:
      enabled: true
      fsGroup: 1001
      fsGroupChangePolicy: Always
      supplementalGroups: []
      sysctls: []
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 6
      initialDelaySeconds: 5
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    replicaCount: 1
    resources: {}
    resourcesPreset: nano
    schedulerName: ""
    service:
      annotations: {}
      clusterIP: ""
      externalTrafficPolicy: Cluster
      extraPorts: []
      headless:
        annotations: {}
      labels: {}
      loadBalancerClass: ""
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      nodePorts:
        postgresql: ""
      ports:
        postgresql: 5432
      sessionAffinity: None
      sessionAffinityConfig: {}
      type: ClusterIP
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 15
      initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    terminationGracePeriodSeconds: ""
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate: {}
      type: RollingUpdate
  replication:
    applicationName: my_application
    numSynchronousReplicas: 0
    synchronousCommit: "off"
  secretAnnotations: {}
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    name: ""
  serviceBindings:
    enabled: false
  shmVolume:
    enabled: true
    sizeLimit: ""
  tls:
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    crlFilename: ""
    enabled: false
    preferServerCiphers: true
  volumePermissions:
    containerSecurityContext:
      runAsGroup: 0
      runAsNonRoot: false
      runAsUser: 0
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r46
    resources: {}
    resourcesPreset: nano
postgresql-ha:
  enabled: false
  global:
    postgresql:
      database: gitea
      password: gitea
      username: gitea
  persistence:
    size: 10Gi
  pgpool:
    adminPassword: changeme3
    srCheckPassword: changeme4
  postgresql:
    password: changeme4
    postgresPassword: changeme1
    repmgrPassword: changeme2
  service:
    ports:
      postgresql: 5432
priorityClassName: ""
replicaCount: 1
resources: {}
schedulerName: ""
securityContext: {}
service:
  http:
    annotations: {}
    clusterIP: None
    externalIPs: null
    externalTrafficPolicy: null
    ipFamilies: null
    ipFamilyPolicy: null
    labels: {}
    loadBalancerClass: null
    loadBalancerIP: 192.168.3.241
    loadBalancerSourceRanges: []
    nodePort: null
    port: 3000
    type: LoadBalancer
  ssh:
    annotations: {}
    clusterIP: None
    externalIPs: null
    externalTrafficPolicy: null
    hostPort: null
    ipFamilies: null
    ipFamilyPolicy: null
    labels: {}
    loadBalancerClass: null
    loadBalancerIP: null
    loadBalancerSourceRanges: []
    nodePort: null
    port: 22
    type: ClusterIP
serviceAccount:
  annotations: {}
  automountServiceAccountToken: false
  create: false
  imagePullSecrets: []
  labels: {}
  name: ""
signing:
  enabled: false
  existingSecret: ""
  gpgHome: /data/git/.gnupg
  privateKey: ""
strategy:
  rollingUpdate:
    maxSurge: 100%
    maxUnavailable: 0
  type: RollingUpdate
test:
  enabled: true
  image:
    name: busybox
    tag: latest
tolerations: []
topologySpreadConstraints: []
valkey:
  architecture: standalone
  enabled: false
  global:
    valkey:
      password: changeme
  master:
    count: 1
    service:
      ports:
        valkey: 6379
valkey-cluster:
  cluster:
    externalAccess:
      enabled: false
      hostMode: false
      service:
        annotations: {}
        disableLoadBalancerIP: false
        loadBalancerIP: []
        loadBalancerIPAnnotaion: ""
        loadBalancerSourceRanges: []
        port: 6379
        type: LoadBalancer
    init: true
    nodes: 3
    replicas: 0
    update:
      addNodes: false
      currentNumberOfNodes: 6
      currentNumberOfReplicas: 1
      newExternalIPs: []
  clusterDomain: cluster.local
  common:
    exampleValue: common-chart
    global:
      compatibility:
        openshift:
          adaptSecurityContext: auto
      defaultStorageClass: ""
      hostAliases: []
      imagePullSecrets: []
      imageRegistry: ""
      security:
        allowInsecureImages: false
      storageClass: ""
      valkey:
        password: ""
  commonAnnotations: {}
  commonLabels: {}
  containerSecurityContext:
    allowPrivilegeEscalation: false
    capabilities:
      drop:
      - ALL
    enabled: true
    privileged: false
    readOnlyRootFilesystem: true
    runAsGroup: 1001
    runAsNonRoot: true
    runAsUser: 1001
    seLinuxOptions: {}
    seccompProfile:
      type: RuntimeDefault
  diagnosticMode:
    args:
    - infinity
    command:
    - sleep
    enabled: false
  enabled: true
  existingSecret: ""
  existingSecretPasswordKey: ""
  extraDeploy: []
  fullnameOverride: ""
  global:
    compatibility:
      openshift:
        adaptSecurityContext: auto
    defaultStorageClass: ""
    hostAliases: []
    imagePullSecrets: []
    imageRegistry: ""
    security:
      allowInsecureImages: false
    storageClass: ""
    valkey:
      password: ""
  image:
    debug: false
    digest: ""
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/valkey-cluster
    tag: 8.1.2-debian-12-r0
  metrics:
    containerPorts:
      http: 9121
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - ALL
      enabled: true
      privileged: false
      readOnlyRootFilesystem: true
      runAsGroup: 1001
      runAsNonRoot: true
      runAsUser: 1001
      seLinuxOptions: {}
      seccompProfile:
        type: RuntimeDefault
    enabled: false
    extraArgs: {}
    extraEnvVars: []
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/redis-exporter
      tag: 1.74.0-debian-12-r1
    podAnnotations:
      prometheus.io/port: '{{ .Values.metrics.containerPorts.http }}'
      prometheus.io/scrape: "true"
    podLabels: {}
    priorityClassName: ""
    prometheusRule:
      additionalLabels: {}
      enabled: false
      namespace: ""
      rules: []
    resources: {}
    resourcesPreset: nano
    service:
      annotations: {}
      clusterIP: ""
      labels: {}
      loadBalancerIP: ""
      ports:
        http: 9121
      type: ClusterIP
    serviceMonitor:
      annotations: {}
      enabled: false
      interval: ""
      jobLabel: ""
      labels: {}
      metricRelabelings: []
      namespace: ""
      relabelings: []
      scrapeTimeout: ""
      selector: {}
  nameOverride: ""
  networkPolicy:
    allowExternal: true
    allowExternalEgress: true
    enabled: true
    extraEgress: []
    extraIngress: []
    ingressNSMatchLabels: {}
    ingressNSPodMatchLabels: {}
  password: ""
  pdb:
    create: true
    maxUnavailable: ""
    minAvailable: ""
  persistence:
    accessModes:
    - ReadWriteOnce
    annotations: {}
    enabled: true
    labels: {}
    matchExpressions: {}
    matchLabels: {}
    path: /bitnami/valkey/data
    size: 8Gi
    storageClass: ""
    subPath: ""
  persistentVolumeClaimRetentionPolicy:
    enabled: false
    whenDeleted: Retain
    whenScaled: Retain
  podDisruptionBudget: {}
  podSecurityContext:
    enabled: true
    fsGroup: 1001
    fsGroupChangePolicy: Always
    supplementalGroups: []
    sysctls: []
  rbac:
    create: false
    role:
      rules: []
  service:
    annotations: {}
    clusterIP: ""
    externalTrafficPolicy: Cluster
    extraPorts: []
    headless:
      annotations: {}
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    nodePorts:
      valkey: ""
    ports:
      valkey: 6379
    sessionAffinity: None
    sessionAffinityConfig: {}
    type: ClusterIP
  serviceAccount:
    annotations: {}
    automountServiceAccountToken: false
    create: true
    name: ""
  sysctlImage:
    command: []
    containerSecurityContext:
      enabled: true
      privileged: true
      runAsUser: 0
      seLinuxOptions: {}
    digest: ""
    enabled: false
    mountHostSys: false
    pullPolicy: IfNotPresent
    pullSecrets: []
    registry: docker.io
    repository: bitnami/os-shell
    resources: {}
    resourcesPreset: nano
    tag: 12-debian-12-r46
  tls:
    authClients: true
    autoGenerated: false
    certCAFilename: ""
    certFilename: ""
    certKeyFilename: ""
    certificatesSecret: ""
    dhParamsFilename: ""
    enabled: false
    existingSecret: ""
  updateJob:
    activeDeadlineSeconds: 600
    affinity: {}
    annotations: {}
    args: []
    automountServiceAccountToken: false
    command: []
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    helmHook: post-upgrade
    hostAliases: []
    initContainers: []
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    priorityClassName: ""
    resources: {}
    resourcesPreset: nano
    tolerations: []
  usePassword: false
  usePasswordFiles: false
  valkey:
    affinity: {}
    args: []
    automountServiceAccountToken: false
    command: []
    configmap: ""
    containerPorts:
      bus: 16379
      valkey: 6379
    customLivenessProbe: {}
    customReadinessProbe: {}
    customStartupProbe: {}
    defaultConfigOverride: ""
    extraEnvVars: []
    extraEnvVarsCM: ""
    extraEnvVarsSecret: ""
    extraVolumeMounts: []
    extraVolumes: []
    hostAliases: []
    hostNetwork: false
    initContainers: []
    lifecycleHooks: {}
    livenessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 5
    nodeAffinityPreset:
      key: ""
      type: ""
      values: []
    nodeSelector: {}
    podAffinityPreset: ""
    podAnnotations: {}
    podAntiAffinityPreset: soft
    podLabels: {}
    podManagementPolicy: Parallel
    priorityClassName: ""
    readinessProbe:
      enabled: true
      failureThreshold: 5
      initialDelaySeconds: 5
      periodSeconds: 5
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    resourcesPreset: nano
    schedulerName: ""
    shareProcessNamespace: false
    sidecars: []
    startupProbe:
      enabled: false
      failureThreshold: 6
      initialDelaySeconds: 300
      path: /
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 5
    tolerations: []
    topologySpreadConstraints: []
    updateStrategy:
      rollingUpdate:
        partition: 0
      type: RollingUpdate
    useAOFPersistence: "yes"
  volumePermissions:
    containerSecurityContext:
      enabled: true
      privileged: false
      runAsUser: 0
      seLinuxOptions: {}
    enabled: false
    image:
      digest: ""
      pullPolicy: IfNotPresent
      pullSecrets: []
      registry: docker.io
      repository: bitnami/os-shell
      tag: 12-debian-12-r46
    resources: {}
    resourcesPreset: nano
